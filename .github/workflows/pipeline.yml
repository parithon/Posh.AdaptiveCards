name: Build Module

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, dev ]

  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@main
      - name: Set required PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v3.5
        with:
          modules-to-cache: Pester, PSScriptAnalyzer, InvokeBuild, platyPS
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}
      - name: Install PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        uses: potatoqualitee/psmodulecache@v3.5
      - name: Setup Nuget cache
        uses: actions/cache@v2
        id: cachernuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore Nuget packages
        if: steps.cachernuget.outputs.cache-hit != 'true'
        run: dotnet restore
      - name: Build Project
        run: dotnet build -c Release
      - name: Test Project
        run: dotnet test --no-build -c Release --logger trx --results-directory "Test-Results-${{ matrix.os }}"
      - name: Publish Project
        run : dotnet publish -c Release
      - name: Test with Pester
        run: |
          Import-Module Pester
          $configuration = [PesterConfiguration]::Default
          $configuration.Run.Exit = $false
          $configuration.Run.Path = Convert-Path -Path .\Posh.AdaptiveCards\bin\Release\netstandard2.0\publish
          $configuration.TestResult.Enabled = $true
          $configuration.TestResult.OutputFormat = 'JUnitXml'
          $configuration.TestResult.OutputPath = "testResults-${{ matrix.os }}\testResults.xml"
          Invoke-Pester -Configuration $configuration
      - name: Upload dotnet test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-results-${{ matrix.os }}
          path: Test-Results-${{ matrix.os }}
      - name: Upload pester test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: pester-results-${{ matrix.os }}
          path: testResults-${{ matrix.os }}
      - name: Upload publish artifact
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: publish-module
          path: Posh.AdaptiveCards/bin/Release/netstandard2.0/publish
  package:
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: publish-module
          path: Posh.AdaptiveCards
      - name: Check current folder structure
        run: |
          Get-ChildItem -Recurse
      - name: Register Local PSRepository
        run: |
          New-Item -Type Directory -Path dist
          Register-PSRepository -Name dist -SourceLocation (Convert-Path ./dist) -PublishLocation (Convert-Path ./dist)
      - name: Publish module to Local PSRepository
        run: Publish-Module -Path ./Posh.AdaptiveCards -Repository dist
      - name: Upload nuget package
        uses: actions/upload-artifact@v2
        with:
            name: posh-adaptivecards-nuget
            path: dist/*.nuget
